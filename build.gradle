apply plugin: 'com.android.application'
buildscript {
    repositories {
        jcenter()
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.2'
    }
}
allprojects {
    repositories{
        google()
        mavenCentral()
    }
}
android {
    compileSdkVersion 26
    buildToolsVersion '28.0.3'
    def abiVersionOffsets = ['arm64-v8': 1, 'armeabi': 2, 'armeabi-v7a': 3, 'mips': 4, 'mips64': 5, 'x86': 6, 'x86_64': 7]
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 26
        externalNativeBuild.ndkBuild.arguments '-j4'
        versionName '1.0'
        versionCode 1
        applicationId 'org.libsdl.app2'
    }
    compileOptions {
        sourceCompatibility '1.7'
        targetCompatibility '1.7'
    }
    lintOptions {
        abortOnError false
    }
    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs 'jni', 'src'
            res.srcDirs 'res'
        }
    }
    externalNativeBuild {
        ndkBuild.path 'jni/Android.mk'
    }
    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a'
            universalApk false
        }
    }
    if (project.hasProperty('RELEASE_KEY_STORE')) {
        signingConfigs {
            release {
                storeFile file(RELEASE_KEY_STORE)
                storePassword RELEASE_KEY_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_ALIAS_PASSWORD
            }
        }

        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def abiVersionOffset = abiVersionOffsets.get(output.getFilter(com.android.build.OutputFile.ABI))
            if (abiVersionOffset != null) {
                output.versionCodeOverride = variant.versionCode + abiVersionOffset
            }
        }
    }
    buildTypes {
        debug {
            jniDebuggable true
            renderscriptDebuggable true
        }
    }
}

dependencies {

}